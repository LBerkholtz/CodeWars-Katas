/**
*Description:
*Write a function that takes a string of braces, and determines if the order of the braces is valid. It should return true if the string is valid, and false if it's invalid.

*This Kata is similar to the Valid Parentheses Kata, but introduces new characters: brackets [], and curly braces {}. Thanks to @arnedag for the idea!

*All input strings will be nonempty, and will only consist of parentheses, brackets and curly braces: ()[]{}.

*What is considered Valid?
*A string of braces is considered valid if all braces are matched with the correct brace.

*Examples
*"(){}[]"   =>  True
*"([{}])"   =>  True
*"(}"       =>  False
*"[(])"     =>  False
*"[({})](]" =>  False
**/







import java.util.ArrayList;
import java.util.Arrays;

public class BraceChecker {

    public boolean isValid(String braces) {
        // iterate through and take out inner braces
        //rewrite to char array and keep taking out braces until false
        boolean done = false;
        char[] bracesArray = braces.toCharArray();
        int j = 0;
        int doFor = bracesArray.length/2;
        while (done == false && j <= doFor) {
            for (int i = 0; i < bracesArray.length-1; i++) {
                if (bracesArray[i] == '{' && bracesArray[i+1] == '}') {
                    bracesArray[i] = '~';
                    bracesArray[i+1] = '~';
                    i+=1;
                } else if (bracesArray[i] == '[' && bracesArray[i+1] == ']') {
                    bracesArray[i] = '~';
                    bracesArray[i+1] = '~';
                    i+=1;
                } else if (bracesArray[i] == '(' && bracesArray[i+1] == ')') {
                    bracesArray[i] = '~';
                    bracesArray[i+1] = '~';
                    i+=1;
                }
                System.out.println(Arrays.toString(bracesArray));
            }//for

        StringBuilder bracesClean = new StringBuilder();
            int x = 0;
            for (int k=0;k<bracesArray.length;k++) {
                System.out.println(k);
                if (bracesArray[k] != '~') {
                    bracesClean.append(bracesArray[k]);
                    x += 1;
                }
            }
            if (bracesClean.length() ==0)
                done = true;
            else {j += 1;
                    String bracesCleanString = bracesClean.toString();
                    bracesArray = bracesCleanString.toCharArray();}
        } //while

        return done;
    }

}
